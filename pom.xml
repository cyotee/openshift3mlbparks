<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>org.openshift</groupId>
	<artifactId>mlbparks</artifactId>
	<packaging>war</packaging>
	<version>1.0</version>
	<name>mlbparks</name>

	<repositories>
		<repository>
			<id>eap</id>
			<url>http://maven.repository.redhat.com/techpreview/all</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>eap</id>
			<url>http://maven.repository.redhat.com/techpreview/all</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>1.7</maven.compiler.source>
		<maven.compiler.target>1.7</maven.compiler.target>

		<jetty.port>9097</jetty.port>
		<jetty.stopPort>19097</jetty.stopPort>

		<host.local.url>localhost</host.local.url>
		<port.tomcat>8080</port.tomcat>

		<host.ose.url>loadtest.rhel-ose.vm</host.ose.url>
		<port.ose>80</port.ose>

		<host.docker.url>rhel-docker.vm</host.docker.url>
		<port.docker>8181</port.docker>

		<host.hosted-ose.url>stage.mlbparks.cloudapps-27ef.oslab.opentlc.com</host.hosted-ose.url>
		<port.hosted-ose>80</port.hosted-ose>

		<performancetest.webservice.host>localhost</performancetest.webservice.host>
		<performancetest.webservice.port>${jetty.port}</performancetest.webservice.port>
		<performancetest.webservice.path>/</performancetest.webservice.path>
		<performancetest.connectTimeout>1000</performancetest.connectTimeout>
		<performancetest.responseTimeout>3000</performancetest.responseTimeout>
		<performancetest.threadCount>20</performancetest.threadCount>
		<performancetest.loopCount>10</performancetest.loopCount>
	</properties>

	<dependencies>
		<!--
			As updates are released for EAP the version of the provided jboss-javaee-6.0
			jar can change. To ensure your application is compiling against the same 
			jars that the runtime provides the <version> element below should match the 
			installed version of EAP on the node hosting your application. To determine 
			the version of EAP running on the node, log into an example EAP application 
			and look in the jbosseap/logs/server.log file for the line: ... JBAS015874: 
			JBoss EAP 6.1.1.GA (AS 7.2.1.Final-redhat-10) started ... To determine the 
			correct value for <version>, download the maven repository zip file corresponding 
			to the installed version of EAP from the customer service portal [1]. Unzip 
			the file and examine the single directory under jboss-eap-*-maven-repository/org/jboss/spec/jboss-javaee-6.0 
			[1] https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?downloadType=distributions&product=appplatform&productChanged=yes"
		-->
		<dependency>
			<groupId>org.jboss.spec</groupId>
			<artifactId>jboss-javaee-6.0</artifactId>
			<version>3.0.2.Final-redhat-4</version>
			<type>pom</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongo-java-driver</artifactId>
			<version>2.9.1</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>com.lazerycode.jmeter</groupId>
				<artifactId>jmeter-maven-plugin</artifactId>
				<version>1.9.0</version>
				<configuration>
					<testResultsTimestamp>false</testResultsTimestamp>
					<overrideRootLogLevel>DEBUG</overrideRootLogLevel>
					<suppressJMeterOutput>false</suppressJMeterOutput>
					<ignoreResultFailures>true</ignoreResultFailures>
					<propertiesUser>
						<webservice.host>${performancetest.webservice.host}</webservice.host>
						<webservice.port>${performancetest.webservice.port}</webservice.port>
						<webservice.path>${performancetest.webservice.path}</webservice.path>
						<webservice.connectTimeout>${performancetest.connectTimeout}</webservice.connectTimeout>
						<webservice.responseTimeout>${performancetest.responseTimeout}</webservice.responseTimeout>
						<threadCount>${performancetest.threadCount}</threadCount>
						<loopCount>${performancetest.threadCount}</loopCount>
					</propertiesUser>
					<propertiesJMeter>
						<jmeter.save.saveservice.thread_counts>true</jmeter.save.saveservice.thread_counts>
					</propertiesJMeter>
					<jmeterPlugins>
						<plugin>
							<groupId>kg.apc</groupId>
							<artifactId>jmeter-plugins</artifactId>
						</plugin>
					</jmeterPlugins>
				</configuration>
				<executions>
					<execution>
						<id>execute-jmeter-tests</id>
						<goals>
							<goal>jmeter</goal>
						</goals>
						<phase>integration-test</phase>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>kg.apc</groupId>
						<artifactId>jmeter-plugins</artifactId>
						<version>1.0.0</version>
						<exclusions>
							<!--
                                Unfortunately some transitive dependencies cannot be found on mvncentral
                                and we have to explicitly exclude them.
                                For a complete list, see https://github.com/mlex/jmeter-maven-example/
                            -->
							<exclusion>
								<groupId>kg.apc</groupId>
								<artifactId>perfmon</artifactId>
							</exclusion>
							<exclusion>
								<groupId>org.apache.hadoop</groupId>
								<artifactId>hadoop-core</artifactId>
							</exclusion>
							<exclusion>
								<groupId>org.apache.hbase</groupId>
								<artifactId>hbase</artifactId>
							</exclusion>

							<!--
                                These dependencies would override direct JMeter dependencies,
                                which results in version conflicts (e.g. NoSuchMethodError on jmeter startup
                            -->
							<exclusion>
								<groupId>org.apache.jmeter</groupId>
								<artifactId>jorphan</artifactId>
							</exclusion>
							<exclusion>
								<groupId>org.apache.bsf</groupId>
								<artifactId>bsf-api</artifactId>
							</exclusion>
							<exclusion>
								<groupId>org.bouncycastle</groupId>
								<artifactId>bcmail-jdk15</artifactId>
							</exclusion>
							<exclusion>
								<groupId>org.bouncycastle</groupId>
								<artifactId>bcprov-jdk15</artifactId>
							</exclusion>
							<exclusion>
								<groupId>javax.activation</groupId>
								<artifactId>activation</artifactId>
							</exclusion>
							<exclusion>
								<groupId>commons-logging</groupId>
								<artifactId>commons-logging</artifactId>
							</exclusion>
						</exclusions>
					</dependency>
				</dependencies>
			</plugin>

			<plugin>
				<groupId>com.lazerycode.jmeter</groupId>
				<artifactId>jmeter-analysis-maven-plugin</artifactId>
				<version>1.0.4</version>
				<configuration>
					<source>${project.build.directory}/jmeter/results/SimpleWebservicePerformanceTest.jtl</source>
				</configuration>
				<executions>
					<execution>
						<id>create-html-report</id>
						<phase>verify</phase>
						<goals>
							<goal>analyze</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<!-- To start an embedded jetty with a simple webapp for demonstration purposes -->
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>8.1.14.v20131031</version>
				<configuration>
					<connectors>
						<connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
							<port>${jetty.port}</port>
						</connector>
					</connectors>
					<stopPort>${jetty.stopPort}</stopPort>
					<stopKey>STOP</stopKey>
				</configuration>
			</plugin>

			<plugin>
				<groupId>de.codecentric</groupId>
				<artifactId>jmeter-graph-maven-plugin</artifactId>
				<version>0.1.0</version>
				<executions>
					<execution>
						<id>create-graph-threads</id>
						<goals>
							<goal>create-graph</goal>
						</goals>
						<phase>verify</phase>
					</execution>
				</executions>
				<configuration>
					<inputFile>${project.build.directory}/jmeter/results/SimpleWebservicePerformanceTest.jtl</inputFile>
					<graphs>
						<graph>
							<pluginType>ThreadsStateOverTime</pluginType>
							<width>800</width>
							<height>600</height>
							<outputFile>${project.build.directory}/jmeter/results/SimpleWebservicePerformanceTest-ThreadsStateOverTime.png</outputFile>
						</graph>
						<graph>
							<pluginType>ResponseTimesOverTime</pluginType>
							<width>800</width>
							<height>600</height>
							<outputFile>${project.build.directory}/jmeter/results/SimpleWebservicePerformanceTest-ResponseTimesOverTime.png</outputFile>
						</graph>
						<graph>
							<pluginType>TransactionsPerSecond</pluginType>
							<width>800</width>
							<height>600</height>
							<outputFile>${project.build.directory}/jmeter/results/SimpleWebservicePerformanceTest-TransactionsPerSecond.png</outputFile>
						</graph>
					</graphs>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<!-- When built in OpenShift the 'openshift' profile will be used when 
				invoking mvn. -->
			<!-- Use this profile for any OpenShift specific customization your app 
				will need. -->
			<!-- By default that is to put the resulting archive into the 'deployments' 
				folder. -->
			<!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
			<id>openshift</id>
			<build>
				<finalName>mlbparks</finalName>
				<plugins>
					<plugin>
						<artifactId>maven-war-plugin</artifactId>
						<version>2.4</version>
						<configuration>
							<failOnMissingWebXml>false</failOnMissingWebXml>
							<outputDirectory>deployments</outputDirectory>
							<warName>ROOT</warName>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>embedded-jetty</id>
			<properties>
				<performancetest.webservice.host>${host.local.url}</performancetest.webservice.host>
				<performancetest.webservice.port>${port.tomcat}</performancetest.webservice.port>
				<performancetest.webservice.path>/</performancetest.webservice.path>
				<performancetest.connectTimeout>1000</performancetest.connectTimeout>
				<performancetest.responseTimeout>3000</performancetest.responseTimeout>
				<performancetest.threadCount>20</performancetest.threadCount>
				<performancetest.loopCount>10</performancetest.loopCount>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.mortbay.jetty</groupId>
						<artifactId>jetty-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>start-jetty</id>
								<goals>
									<goal>start</goal>
								</goals>
								<phase>pre-integration-test</phase>
								<configuration>
									<daemon>true</daemon>
								</configuration>
							</execution>
							<execution>
								<id>stop-jetty</id>
								<goals>
									<goal>stop</goal>
								</goals>
								<phase>post-integration-test</phase>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>local-tomcat</id>
			<properties>
				<performancetest.webservice.host>${host.local.url}</performancetest.webservice.host>
				<performancetest.webservice.port>${port.tomcat}</performancetest.webservice.port>
				<performancetest.webservice.path>/</performancetest.webservice.path>
				<performancetest.connectTimeout>1000</performancetest.connectTimeout>
				<performancetest.responseTimeout>3000</performancetest.responseTimeout>
				<performancetest.threadCount>20</performancetest.threadCount>
				<performancetest.loopCount>10</performancetest.loopCount>
			</properties>
			<build>
				<plugins>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>local-ose3</id>
			<properties>
				<performancetest.webservice.host>${host.ose.url}</performancetest.webservice.host>
				<performancetest.webservice.port>${port.ose}</performancetest.webservice.port>
				<performancetest.webservice.path>/</performancetest.webservice.path>
				<performancetest.connectTimeout>1000</performancetest.connectTimeout>
				<performancetest.responseTimeout>3000</performancetest.responseTimeout>
				<performancetest.threadCount>20</performancetest.threadCount>
				<performancetest.loopCount>10</performancetest.loopCount>
			</properties>
			<build>
				<plugins>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>local-docker</id>
			<properties>
				<performancetest.webservice.host>${host.docker.url}</performancetest.webservice.host>
				<performancetest.webservice.port>${port.docker}</performancetest.webservice.port>
				<performancetest.webservice.path>/</performancetest.webservice.path>
				<performancetest.connectTimeout>1000</performancetest.connectTimeout>
				<performancetest.responseTimeout>3000</performancetest.responseTimeout>
				<performancetest.threadCount>20</performancetest.threadCount>
				<performancetest.loopCount>10</performancetest.loopCount>
			</properties>
			<build>
				<plugins>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>hosted-ose3</id>
			<properties>
				<performancetest.webservice.host>${host.hosted-ose.url}</performancetest.webservice.host>
				<performancetest.webservice.port>${port.hosted-ose}</performancetest.webservice.port>
				<performancetest.webservice.path>/</performancetest.webservice.path>
				<performancetest.connectTimeout>1000</performancetest.connectTimeout>
				<performancetest.responseTimeout>3000</performancetest.responseTimeout>
				<performancetest.threadCount>20</performancetest.threadCount>
				<performancetest.loopCount>10</performancetest.loopCount>
			</properties>
			<build>
				<plugins>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
